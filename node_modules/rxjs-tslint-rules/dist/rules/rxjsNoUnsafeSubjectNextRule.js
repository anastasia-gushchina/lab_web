"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var tslib_1 = require("tslib");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Lint = tslib_1.__importStar(require("tslint"));
var tsutils = tslib_1.__importStar(require("tsutils"));
var ts = tslib_1.__importStar(require("typescript"));
var peer = tslib_1.__importStar(require("../support/peer"));
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var callExpressions = tsquery_1.tsquery(sourceFile, "CallExpression[expression.name.text=\"next\"]");
        callExpressions.forEach(function (node) {
            var callExpression = node;
            var args = callExpression.arguments;
            if (args.length === 0) {
                if (tsutils.isPropertyAccessExpression(callExpression.expression)) {
                    var _a = callExpression.expression, expression = _a.expression, name_1 = _a.name;
                    var type = typeChecker.getTypeAtLocation(expression);
                    if (util_1.isReferenceType(type) && util_1.couldBeType(type, "Subject")) {
                        var _b = tslib_1.__read(typeChecker.getTypeArguments(type), 1), typeArg = _b[0];
                        if (tsutils.isTypeFlagSet(typeArg, ts.TypeFlags.Any)) {
                            return;
                        }
                        if (tsutils.isTypeFlagSet(typeArg, ts.TypeFlags.Unknown)) {
                            return;
                        }
                        if (tsutils.isTypeFlagSet(typeArg, ts.TypeFlags.Void)) {
                            return;
                        }
                        if (util_1.isUnionType(typeArg) &&
                            typeArg.types.some(function (t) {
                                return tsutils.isTypeFlagSet(t, ts.TypeFlags.Void);
                            })) {
                            return;
                        }
                        failures.push(new Lint.RuleFailure(sourceFile, name_1.getStart(), name_1.getStart() + name_1.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                    }
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 ? peer.v5NotSupportedMessage : undefined,
        description: "Disallows unsafe optional `next` calls.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-unsafe-subject-next",
        type: "functionality",
        typescriptOnly: true,
    };
    Rule.FAILURE_STRING = "Unsafe optional next calls are forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
