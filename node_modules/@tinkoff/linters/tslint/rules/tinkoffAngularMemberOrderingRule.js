"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var tslint_1 = require("tslint");
var ts = require("typescript");
var tsutils_1 = require("tsutils");
var utils_1 = require("./utils");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        this.memberOrderingOptionsParse(Rule.metadata.options.order);
        var walker = new TinkoffAngularMemberOrderingWalker(sourceFile, this.ruleName, undefined);
        return this.applyWithWalker(walker);
    };
    Rule.prototype.memberOrderingOptionsParse = function (order) {
        var counter = 0;
        for (var _i = 0, order_1 = order; _i < order_1.length; _i++) {
            var member = order_1[_i];
            Rule.memberData[member].rank = counter;
            counter += 1;
        }
    };
    Rule.memberData = utils_1.defaultMemberData;
    Rule.metadata = {
        ruleName: 'tinkoff-angular-member-ordering',
        description: 'Enforce member ordering.',
        hasFix: false,
        optionsDescription: '',
        options: {
            order: [
                'private-instance-field',
                'private-static-field',
                'protected-static-field',
                'protected-instance-field',
                'public-instance-field',
                'public-static-field',
                '@Input',
                '@Output',
                'public-getter',
                'public-setter',
                'protected-getter',
                'protected-setter',
                'private-getter',
                'private-setter',
                'public-instance-method',
                'public-static-method',
                'protected-instance-method',
                'protected-static-method',
                'private-instance-method',
                'private-static-method',
            ],
        },
        optionExamples: [
            'private-instance-field',
            'private-static-field',
            'protected-static-field',
            'protected-instance-field',
            'public-instance-field',
            'public-static-field',
            '@Input',
            '@Output',
            'public-getter',
            'public-setter',
            'protected-getter',
            'protected-setter',
            'private-getter',
            'private-setter',
            'public-instance-method',
            'public-static-method',
            'protected-instance-method',
            'protected-static-method',
            'private-instance-method',
            'private-static-method',
        ],
        type: 'style',
        typescriptOnly: false,
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var TinkoffAngularMemberOrderingWalker = /** @class */ (function (_super) {
    __extends(TinkoffAngularMemberOrderingWalker, _super);
    function TinkoffAngularMemberOrderingWalker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bindingWasAppeared = false;
        return _this;
    }
    TinkoffAngularMemberOrderingWalker.prototype.getFailureString = function (nextNode, prevNode) {
        return this.getNodeType(nextNode) + " must be before " + this.getNodeType(prevNode);
    };
    TinkoffAngularMemberOrderingWalker.prototype.getFailureStringForAccessor = function (node) {
        if (this.isInput(node)) {
            return '@Input get/set accessor must be at the end of input\'s declarations';
        }
        return '@Output get/set accessor must be at the end of output\'s declarations';
    };
    TinkoffAngularMemberOrderingWalker.prototype.hasMatch = function (node) {
        return (node.kind === ts.SyntaxKind.PropertyDeclaration ||
            node.kind === ts.SyntaxKind.MethodDeclaration ||
            this.isInputAccessor(node) ||
            this.isOutputAccessor(node) ||
            this.isGetAccessor(node) ||
            this.isSetAccessor(node));
    };
    TinkoffAngularMemberOrderingWalker.prototype.isClass = function (node) {
        return node.kind === ts.SyntaxKind.ClassDeclaration;
    };
    TinkoffAngularMemberOrderingWalker.prototype.isRightOrder = function (node, prevNode) {
        if (this.is2WayBinding(node, prevNode)) {
            this.bindingWasAppeared = true;
            return true;
        }
        var toBeReturned;
        if (this.bindingWasAppeared && this.isInput(node)) {
            toBeReturned = true;
        }
        else {
            toBeReturned = this.getNodeRank(node) >= this.getNodeRank(prevNode);
        }
        this.bindingWasAppeared = false;
        return toBeReturned;
    };
    TinkoffAngularMemberOrderingWalker.prototype.wrongWithAccessor = function (node, prevNode) {
        return (this.isInputAfterAccessor(node, prevNode) || this.isOutputAfterAccessor(node, prevNode));
    };
    TinkoffAngularMemberOrderingWalker.prototype.nodeWidth = function (node) {
        var input = '@Input';
        var output = '@Output';
        if (this.isInput(node)) {
            return input.length;
        }
        if (this.isOutput(node)) {
            return output.length;
        }
        return node.getChildAt(0).getWidth();
    };
    TinkoffAngularMemberOrderingWalker.prototype.isInputAfterAccessor = function (node, prevNode) {
        var isNodeInput = this.isInput(node);
        var isNodeAccessor = this.isInputAccessor(node);
        var isPrevNodeInputAccessor = this.isInputAccessor(prevNode);
        return isNodeInput && !isNodeAccessor && isPrevNodeInputAccessor;
    };
    TinkoffAngularMemberOrderingWalker.prototype.isOutputAfterAccessor = function (node, prevNode) {
        var isNodeOutput = this.isOutput(node);
        var isNodeAccessor = this.isOutputAccessor(node);
        var isPrevNodeNodeOutputAccessor = this.isOutputAccessor(prevNode);
        return isNodeOutput && !isNodeAccessor && isPrevNodeNodeOutputAccessor;
    };
    TinkoffAngularMemberOrderingWalker.prototype.getNodeType = function (node) {
        return this.getNodeInfo(node, 'text');
    };
    TinkoffAngularMemberOrderingWalker.prototype.getNodeRank = function (node) {
        return this.getNodeInfo(node, 'rank');
    };
    TinkoffAngularMemberOrderingWalker.prototype.getNodeInfo = function (node, field) {
        var nodeName;
        if (this.isInput(node)) {
            return Rule.memberData['@Input'][field];
        }
        if (this.isOutput(node)) {
            return Rule.memberData['@Output'][field];
        }
        if (this.isIncludedModifier(node, ts.SyntaxKind.PrivateKeyword)) {
            nodeName = 'private';
        }
        else if (this.isIncludedModifier(node, ts.SyntaxKind.ProtectedKeyword)) {
            nodeName = 'protected';
        }
        else {
            nodeName = 'public';
        }
        if (this.isGetAccessor(node)) {
            nodeName += '-getter';
            return Rule.memberData[nodeName][field];
        }
        if (this.isSetAccessor(node)) {
            nodeName += '-setter';
            return Rule.memberData[nodeName][field];
        }
        if (this.isIncludedModifier(node, ts.SyntaxKind.StaticKeyword)) {
            nodeName += '-static';
        }
        else {
            nodeName += '-instance';
        }
        if (node.kind === ts.SyntaxKind.MethodDeclaration) {
            nodeName += '-method';
        }
        else {
            nodeName += '-field';
        }
        return Rule.memberData[nodeName][field];
    };
    TinkoffAngularMemberOrderingWalker.prototype.is2WayBinding = function (node, prevNode) {
        var nodeIsOutput = this.isOutput(node);
        var prevNodeIsInput = this.isInput(prevNode);
        var nodeStartsWithPrevNode = this.getNodeName(node).startsWith(this.getNodeName(prevNode));
        var nodeEndsWithChange = this.getNodeName(node).endsWith('Change');
        return nodeEndsWithChange && nodeStartsWithPrevNode && prevNodeIsInput && nodeIsOutput;
    };
    TinkoffAngularMemberOrderingWalker.prototype.getNodeName = function (node) {
        return node.name.getFullText();
    };
    TinkoffAngularMemberOrderingWalker.prototype.isInput = function (node) {
        return node.getText().startsWith('@Input');
    };
    TinkoffAngularMemberOrderingWalker.prototype.isOutput = function (node) {
        return node.getText().startsWith('@Output');
    };
    TinkoffAngularMemberOrderingWalker.prototype.isIncludedModifier = function (node, kind) {
        return tsutils_1.hasModifier(node.modifiers, kind);
    };
    TinkoffAngularMemberOrderingWalker.prototype.isInputAccessor = function (node) {
        return this.isAccessor(node) && this.isInput(node);
    };
    TinkoffAngularMemberOrderingWalker.prototype.isOutputAccessor = function (node) {
        return this.isAccessor(node) && this.isOutput(node);
    };
    TinkoffAngularMemberOrderingWalker.prototype.isAccessor = function (node) {
        return this.isGetAccessor(node) || this.isSetAccessor(node);
    };
    TinkoffAngularMemberOrderingWalker.prototype.isGetAccessor = function (node) {
        return node.kind === ts.SyntaxKind.GetAccessor;
    };
    TinkoffAngularMemberOrderingWalker.prototype.isSetAccessor = function (node) {
        return node.kind === ts.SyntaxKind.SetAccessor;
    };
    return TinkoffAngularMemberOrderingWalker;
}(utils_1.AngularMemberOrderingWalker));
