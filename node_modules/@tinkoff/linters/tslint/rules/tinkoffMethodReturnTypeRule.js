"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var Lint = require("tslint");
var ts = require("typescript");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new TinkoffMethodReturnTypeWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    Rule.FAILURE_STRING = 'Function with return keyword must specify return type';
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var TinkoffMethodReturnTypeWalker = /** @class */ (function (_super) {
    __extends(TinkoffMethodReturnTypeWalker, _super);
    function TinkoffMethodReturnTypeWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TinkoffMethodReturnTypeWalker.prototype.visitReturnStatement = function (returnNode) {
        if (returnNode.expression) {
            this.checkRule(returnNode);
        }
        _super.prototype.visitReturnStatement.call(this, returnNode);
    };
    TinkoffMethodReturnTypeWalker.prototype.checkRule = function (returnNode) {
        var methodNode = this.findMethodNode(returnNode);
        if (methodNode && !this.checkTypeDefExists(methodNode)) {
            this.addFailureAt(this.findClosingBracket(methodNode).getEnd(), 1, Rule.FAILURE_STRING);
        }
    };
    TinkoffMethodReturnTypeWalker.prototype.findMethodNode = function (suspectNode) {
        if (!suspectNode.parent || suspectNode.kind === ts.SyntaxKind.ArrowFunction) {
            return null;
        }
        return this.isMethodOrFunction(suspectNode)
            ? suspectNode
            : this.findMethodNode(suspectNode.parent);
    };
    TinkoffMethodReturnTypeWalker.prototype.isMethodOrFunction = function (suspectNode) {
        return (suspectNode.kind === ts.SyntaxKind.FunctionDeclaration ||
            suspectNode.kind === ts.SyntaxKind.MethodDeclaration);
    };
    TinkoffMethodReturnTypeWalker.prototype.checkTypeDefExists = function (node) {
        return node.getChildren().some(function (child) { return ts.isTypeNode(child); });
    };
    TinkoffMethodReturnTypeWalker.prototype.findClosingBracket = function (node) {
        return node.getChildren().find(function (child) { return child.kind === ts.SyntaxKind.CloseParenToken; });
    };
    return TinkoffMethodReturnTypeWalker;
}(Lint.RuleWalker));
