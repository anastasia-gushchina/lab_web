"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var tslint_1 = require("tslint");
var ts = require("typescript");
var utils_1 = require("./utils");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new TinkoffNewLineAfterVariableDeclarationWalker(sourceFile, this.ruleName, undefined);
        return this.applyWithWalker(walker);
    };
    Rule.FAILURE_STRING = 'Missing one blank line around variable declaration';
    Rule.metadata = {
        ruleName: 'tinkoff-new-line-after-variable-declaration',
        description: 'Enforces a new line around variable declarations',
        hasFix: true,
        optionsDescription: '',
        options: {},
        optionExamples: [],
        type: 'style',
        typescriptOnly: false,
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var TinkoffNewLineAfterVariableDeclarationWalker = /** @class */ (function (_super) {
    __extends(TinkoffNewLineAfterVariableDeclarationWalker, _super);
    function TinkoffNewLineAfterVariableDeclarationWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TinkoffNewLineAfterVariableDeclarationWalker.prototype.getFailureString = function () {
        return Rule.FAILURE_STRING;
    };
    TinkoffNewLineAfterVariableDeclarationWalker.prototype.hasMatch = function (node) {
        return node.kind === ts.SyntaxKind.VariableStatement;
    };
    return TinkoffNewLineAfterVariableDeclarationWalker;
}(utils_1.NewLineRuleWalker));
